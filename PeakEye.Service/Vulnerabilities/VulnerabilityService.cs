using AutoMapper;
using FluentValidation;
using PeakEye.Repository;
using PeakEye.Repository.Vulnerabilities;
using PeakEye.Service.Vulnerabilities.Dtos;
using System.Net;
using System.Xml.Linq;

namespace PeakEye.Service.Vulnerabilities
{
    public class VulnerabilityService(
        IVulnerabilityRepository vulnerabilityRepository,
        IMapper mapper,
        IUnitOfWork unitOfWork,
        IValidator<CreateVulnerabilityDto> validator) : IVulnerabilityService
    {

        private double CalculateCvssBaseScore(CvssInputDto request)
        {
            double av = request.AttackVector switch { "N" => 0.85, "A" => 0.62, "L" => 0.55, "P" => 0.2, _ => 0 };
            double ac = request.AttackComplexity switch { "L" => 0.77, "H" => 0.44, _ => 0 };
            double pr = request.PrivilegesRequired switch { "N" => 0.85, "L" => 0.62, "H" => 0.27, _ => 0 };
            double ui = request.UserInteraction switch { "N" => 0.85, "R" => 0.62, _ => 0 };
            double c = request.ConfidentialityImpact switch { "N" => 0.0, "L" => 0.22, "H" => 0.56, _ => 0 };
            double i = request.IntegrityImpact switch { "N" => 0.0, "L" => 0.22, "H" => 0.56, _ => 0 };
            double a = request.AvailabilityImpact switch { "N" => 0.0, "L" => 0.22, "H" => 0.56, _ => 0 };

            double impact = 1 - ((1 - c) * (1 - i) * (1 - a));
            double exploitability = av * ac * pr * ui * 8.22;

            double baseScore = 0.0;
            if (impact > 0)
            {
                baseScore = (0.6 * impact) + (0.4 * exploitability);
            }

            double finalBaseScore = baseScore;
            if (request.Scope == "C") 
            {
                double newImpact = 1 - ((1 - c) * (1 - i) * (1 - a));
                finalBaseScore = (0.6 * newImpact) + (0.4 * exploitability); 
                finalBaseScore = Math.Min(1.08 * finalBaseScore, 10); 
            }

            return Math.Round(finalBaseScore, 1);

        }


        public async Task<ServiceResult> CreateAsync(CreateVulnerabilityDto request)
        {
            double cvssScore = CalculateCvssBaseScore(request.CvssInput);
            var validationResult = await validator.ValidateAsync(request);
            
            if (!validationResult.IsValid)
            {
                return ServiceResult.Fail(
                    validationResult.Errors.Select(x => x.ErrorMessage).ToList());
            }
            var vulnerability = mapper.Map<Vulnerability>(request);
            vulnerability.CVSSPoint = cvssScore;
            await vulnerabilityRepository.CreateAsync(vulnerability);
            await unitOfWork.SaveChangesAsync();
            return ServiceResult.Success(HttpStatusCode.Created);
        }

        public async Task<ServiceResult> DeleteAsync(int id)
        {
            var vulnerability = await vulnerabilityRepository.GetByIdAsync(id);
            vulnerabilityRepository.Delete(vulnerability);
            await unitOfWork.SaveChangesAsync();
            return ServiceResult.Success(HttpStatusCode.NoContent);
        }

        public async Task<ServiceResult<List<ResultVulnerabilityDto>>> GetAllAsync()
        {
            var vulnerabilities = await vulnerabilityRepository.GetAllAsync();
            var vulnerabilitiesDto = mapper.Map<List<ResultVulnerabilityDto>>(vulnerabilities);
            return ServiceResult<List<ResultVulnerabilityDto>>.Success(vulnerabilitiesDto);
        }

        public async Task<ServiceResult<ResultVulnerabilityDto>> GetByIdAsync(int id)
        {
            var vulnerability = await vulnerabilityRepository.GetByIdAsync(id);
            var vulnerabilityDto = mapper.Map<ResultVulnerabilityDto>(vulnerability);
            return ServiceResult<ResultVulnerabilityDto>.Success(vulnerabilityDto);
        }

        public async Task<ServiceResult<List<ResultVulnerabilityDto>>> GetVulnerabilitiesByNameAsync(string name)
        {
            var result = await vulnerabilityRepository.GetVulnerabilitiesByNameAsync(name);
        
            var resultDto = mapper.Map<List<ResultVulnerabilityDto>>(result);

            return ServiceResult<List<ResultVulnerabilityDto>>.Success(resultDto);
        }

        public async Task<ServiceResult<List<ResultVulnerabilityDto>>> GetVulnerabilitiesBySeverityAsync(int severity)
        {
            var result = await vulnerabilityRepository.GetVulnerabilitiesBySeverityAsync(severity);

            var resultDto = mapper.Map<List<ResultVulnerabilityDto>>(result);

            return ServiceResult<List<ResultVulnerabilityDto>>.Success(resultDto);
        }

        public async Task<ServiceResult<List<ResultVulnerabilityDto>>> GetVulnerabilitiesByStatusAsync(bool status)
        {
            var result = await vulnerabilityRepository.GetVulnerabilitiesByStatusAsync(status);

            var resultDto = mapper.Map<List<ResultVulnerabilityDto>>(result);

            return ServiceResult<List<ResultVulnerabilityDto>>.Success(resultDto);
        }

        public async Task<ServiceResult> UpdateAsync(UpdateVulnerabilityDto request)
        {
            var vulnerability = mapper.Map<Vulnerability>(request);
            vulnerability.Id = request.Id;
            double cvssScore = CalculateCvssBaseScore(request.CvssInput);
            vulnerability.CVSSPoint = cvssScore;
            vulnerabilityRepository.Update(vulnerability);
            await unitOfWork.SaveChangesAsync();

            return ServiceResult.Success(HttpStatusCode.NoContent);
        }
    }
}
